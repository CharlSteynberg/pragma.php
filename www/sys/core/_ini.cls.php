<?

// cls :: core - class definition
// --------------------------------------------------------------------------------------
   class core
   {
   // pty :: attr - `core` attributes
   // -----------------------------------------------------------------------------------
      private static $attr = 0;
   // -----------------------------------------------------------------------------------



   // fnc :: ini - initialize `core`
   // -----------------------------------------------------------------------------------
      public static function ini($lne)
      {
      // def :: local - vars
      // --------------------------------------------------------------------------------
         $cfd = 'sys/core';                                    // core file directory
         $ccp = 'cfg/core/_ini.cfg.jso';                       // core config path
         $cfg = json_decode(file_get_contents($ccp));          // core config object
         $cml = $cfg->modeList;                                // core mode list
         $cfl = scandir($cfd);                                 // core file list
      // --------------------------------------------------------------------------------


      // cnd :: fail - on invalid conf
      // --------------------------------------------------------------------------------
         if ($cfg === null)
         { core::fail('config - invalid JSON syntax', $ccp, '?'); }

         if (!in_array($cfg->coreMode, $cml))
         { core::fail('config - invalid `coreMode`',$ccp,3); }
      // --------------------------------------------------------------------------------


      // def :: global - constants
      // --------------------------------------------------------------------------------
         foreach ($cfg->constant as $key => $val)
         { define($key,$val); }

         $cwd = getcwd();
         $shd = explode('/', $cwd);

         define('CWD', "$cwd/");                            // current working directory
         define('SHD',array_pop($shd));                     // system home directory
         define('ENC',$cfg->encoding);                      // system wide charset
         define('core', CRB.'core'.CRE);                    // class reference constant
         define('MODE',$cfg->coreMode);                     // core runtime mode
      // --------------------------------------------------------------------------------


      // run :: loop - on `$cfl` & require conditionally
      // --------------------------------------------------------------------------------
         foreach ($cfl as $itm)
         {
            if (($itm[0] !== '.') && ($itm[0] !== '_'))
            { require_once("$cfd/$itm"); }
         }
      // --------------------------------------------------------------------------------


      // set :: attr - `core` attributes object
      // --------------------------------------------------------------------------------
         self::$attr = obj
         ([
            'conf' =>$cfg,
            'scope'=>$cfg->atrScope,
            'stack'=>[],
            'paths'=>[]
         ]);
      // --------------------------------------------------------------------------------


      // set :: conf - interals
      // --------------------------------------------------------------------------------
         error_reporting(0);                                // prevent double error mesg
         mb_internal_encoding(ENC);                         // encoding (charset)
         date_default_timezone_set($cfg->timeZone);         // time-zone
      // --------------------------------------------------------------------------------


      // set :: auto - class loading
      // --------------------------------------------------------------------------------
         spl_autoload_register
         (
            function($cls)
            { self::load($cls); }
         );
      // --------------------------------------------------------------------------------


      // add :: stack - ini
      // --------------------------------------------------------------------------------
         core::stack
         ([
            'file'=>__FILE__,
            'line'=>$lne,
            'call'=>'core::ini',
            'args'=>[$lne]
         ]);
      // --------------------------------------------------------------------------------
      }
   // -----------------------------------------------------------------------------------



   // fnc :: stack - build clean stack trace
   // -----------------------------------------------------------------------------------
      public static function stack($add=null)
      {
      // cnd :: add - prepend stack item
      // --------------------------------------------------------------------------------
         if ($add !== null)
         {
            $stc = self::$attr->stack;
            $pth = self::$attr->paths;
            $add = (object)$add;

            $add->file = str_replace(CWD, '', $add->file);

            array_unshift($stc,$add);
            array_unshift($pth,$add->file);

            self::$attr->stack = $stc;
            self::$attr->paths = $pth;

            return true;
         }
      // --------------------------------------------------------------------------------


      // def :: locals
      // --------------------------------------------------------------------------------
         $s = debug_backtrace();
         $n = count(self::$attr->stack);
         $z = (($n > 0) ? $s[0] : null);
         $m = self::$attr->conf->stackMax;
         $r = [];
         $c = [];
      // --------------------------------------------------------------------------------


      // cnd :: skip on empty stack
      // --------------------------------------------------------------------------------
         if ($n < 1)
         { return false; }
      // --------------------------------------------------------------------------------


      // cnd :: fail - on stack limit
      // --------------------------------------------------------------------------------
         if ($n >= $m)
         {
         // add :: fail - to stack
         // --------------------------------------------------------------------------------
            $err = 'stack overflow';
            $msg = "Maximum call stack limit ($m) exceeded!";

            core::stack
            ([
               'file'=>(isset($z['file']) ? $z['file'] : __FILE__),
               'line'=>(isset($z['line']) ? $z['line'] : __LINE__),
               'call'=>"fail::$err",
               'args'=>[$msg]
            ]);

            fail::{$err}($msg);
         // --------------------------------------------------------------------------------
         }
      // --------------------------------------------------------------------------------


      // run :: loop - on stack trace to filter & fix for useful & uniform data
      // --------------------------------------------------------------------------------
         foreach ($s as $k => $v)
         {
         // cnd :: skip - if `no file` or `no line`
         // -----------------------------------------------------------------------------
            if (!isset($v['file']) || !isset($v['line']))
            { continue; }
         // -----------------------------------------------------------------------------

         // set :: path, line, func
         // -----------------------------------------------------------------------------
            $p = str_replace(CWD, '', $v['file']);
            $l = $v['line'].'';
            $f = (isset($v['function']) ? $v['function'] : '_');
            $f = (((strlen($f) > 30) || strpos($f,' ') !== false) ? str : $f);
         // -----------------------------------------------------------------------------

         // cnd :: if no class, set to `func`
         // -----------------------------------------------------------------------------
            if (!isset($v['class']))
            { $v['class'] = 'func'; }
         // -----------------------------------------------------------------------------

         // cnd :: skip if empty line, empty -or system function, or stack function
         // -----------------------------------------------------------------------------
            if
            (
               ($l === '') ||
               ($f[0] === '_') ||
               ($f === 'spl_autoload_call') || ($f === 'call_user_func_array') ||
               (($v['class'] === 'core') && ($v['function'] === 'stack')) ||
               (($v['class'] === 'core') && ($v['function'] === 'get') && ($v['args'][0] === 'stack'))
            )
            { continue; }
         // -----------------------------------------------------------------------------


         // add :: only - 1 good item to stack & stop
         // -----------------------------------------------------------------------------
            core::stack
            ([
               'file'=>$p,
               'line'=>$v['line'],
               'call'=>$v['class'].'::'.$v['function'],
               'args'=>$v['args']
            ]);

            break;
         // -----------------------------------------------------------------------------
         }
      }
   // -----------------------------------------------------------------------------------



   // fnc :: fail - halt on core fail with debug template html
   // -----------------------------------------------------------------------------------
      public static function fail($m,$f,$l)
      {
         $msg = 'CORE ERROR&nbsp;&nbsp;'.$m;
         $htm = file_get_contents('cfg/http/tpl/dbug.tpl.htm');
         $stc = ['<tr>','',"</tr>\n"];
         $lst = ['1','core::init','[]',$f,"($l)"];

         foreach ($lst as $idx => $itm)
         { $stc[1] .= '<td id="col'.$idx.'">'.$itm.'</td>'; }

         $stc = implode($stc);
         $htm = str_replace(['({msg})','({dbg})','({stc})'], [$msg,'...',$stc], $htm);

         echo $htm;
         exit(1);
      }
   // -----------------------------------------------------------------------------------



   // fnc :: load - classes, extensions & configuration from path by reference
   // -----------------------------------------------------------------------------------
      public static function load($ref)
      {
      // add :: to - call-stack
      // --------------------------------------------------------------------------------
         self::stack();
      // --------------------------------------------------------------------------------

      // def :: local - vars
      // --------------------------------------------------------------------------------
         $pts = explode('.',$ref);
         $cnt = count($pts);
         $cls = array_shift($pts);
         $rpn = (file_exists(CWD."sys/$cls") ? "sys/$cls" : "app/$cls");
         $cpn = (($rpn === "sys/$cls" ? "cfg/$cls" : "app/cfg/$cls"));

         $lri = array_pop($pts);
         $erp = implode($pts,'/');
         $cep = (isset($pts[0]) ? $pts[0] : $lri);

         $erp = ($erp ? "/$erp" : '');
         $lri = ($lri ? "/$lri" : '');
         $cep = ($cep ? "/$cep" : '');

         // $tpe = (($cnt < 2) ? 'cls' : (($pts[1] === 'conf') ? 'cfg' : 'fnc'));

         $pnl = obj
         ([
            'cls'=>"$rpn/_ini.cls.php",
            'fnc'=>"$rpn$erp$lri.fnc.php",
            'ifl'=>"$rpn/func.lib.php",
            'efl'=>"$rpn$erp/func.lib.php",
            'icp'=>"$cpn/_ini.cfg.jso",
            'ecp'=>"$cpn$cep.cfg.jso",
         ]);

         // if (($cnt > 1) && file_exists("$rpn/$erp"))
      // --------------------------------------------------------------------------------

      // cnd :: def - `$pth`
      // --------------------------------------------------------------------------------
      // --------------------------------------------------------------------------------
         debug($pnl);
      }
   // -----------------------------------------------------------------------------------



   // fnc :: tst - check if `core.attr.ref` is valid
   // -----------------------------------------------------------------------------------
      public static function tst($ref)
      {
      // def :: vars - locals
      // --------------------------------------------------------------------------------
         $cls = __CLASS__;
         $lst = explode('.',$ref);
         $ref = (($lst[0] === $cls) ? "$cls.$ref" : $ref);
         $pth = self::$attr->paths[0];
         $stc = self::$attr->stack[0];
         $fnc = explode('::', $stc->call)[1];
         $scp = self::$attr->scope;
         $arr = [];
      // --------------------------------------------------------------------------------

      // cnd :: fail - if `template` is map's first item, on if `$ref` is invalid
      // --------------------------------------------------------------------------------
         if (($lst[0] === $cls) || ($ref[0] === '.') || (substr($ref,-1,1) === '.'))
         { fail::{Ref}("invalid reference: `$ref`"); }
      // --------------------------------------------------------------------------------

      // run :: loop - on map items
      // --------------------------------------------------------------------------------
         foreach ($lst as $itm)
         {
            $arr[] = $itm;
            $tgt = implode($arr, '.');

            if (isset($scp->bias->$tgt) && ($scp->bias->$tgt !== $pth))
            { fail::{'scope'}("`$cls.$tgt` is biased to `$pth`"); }

            if (isset($scp->lock->$tgt) && str($fnc)->is(['set','add','rip']))
            { fail::{'scope'}("`$cls.$tgt` is locked"); }
         }
      // --------------------------------------------------------------------------------

      // rsl :: true
      // --------------------------------------------------------------------------------
         return true;
      // --------------------------------------------------------------------------------
      }
   // -----------------------------------------------------------------------------------



   // fnc :: set - define `core` attribute by ref
   // -----------------------------------------------------------------------------------
      public static function set($ref,$val)
      {
      // add :: to - call-stack
      // --------------------------------------------------------------------------------
         self::stack();
      // --------------------------------------------------------------------------------

      // run :: test - `$ref`
      // --------------------------------------------------------------------------------
         self::tst($ref);
      // --------------------------------------------------------------------------------

      // def :: vars - locals
      // --------------------------------------------------------------------------------
         $pth = self::$attr->paths[0];
         $scp = get::{'*:'}(self::$attr->conf->atrScope,Keys);
      // --------------------------------------------------------------------------------

      // cnd :: set - scope if `$val` is `scope` reference
      // --------------------------------------------------------------------------------
         if ((is::str($val)) && str($val)->is($scp))
         {
            $dat = (str($val)->is([lock,once]) ? true : $pth);
            self::$attr->scope->{$val}->$ref = $dat;
            return true;
         }
      // --------------------------------------------------------------------------------

      // set :: attr - map value
      // --------------------------------------------------------------------------------
         self::$attr = set::{$ref}(self::$attr,$val);
         return true;
      // --------------------------------------------------------------------------------
      }
   // -----------------------------------------------------------------------------------



   // fnc :: get - `core` attribute by ref
   // -----------------------------------------------------------------------------------
      public static function get($ref,$dat=udf)
      {
      // add :: to - call-stack
      // --------------------------------------------------------------------------------
         if (!defined('failMode')){ self::stack(); }
      // --------------------------------------------------------------------------------

      // run :: test - `$ref`
      // --------------------------------------------------------------------------------
         self::tst($ref);
      // --------------------------------------------------------------------------------

      // def :: vars - locals
      // --------------------------------------------------------------------------------
         $rsl = get::{$ref}(self::$attr,$dat);

      // TODO !! `once` scope !!
      // --------------------------------------------------------------------------------


      // cnd :: on - undefined `$rsl` & ref is conf.*
      // --------------------------------------------------------------------------------
         if ($rsl === udf)
         {
            if (substr($ref,0,5) === 'conf.')
            { core::load(__CLASS__.'.'.$ref); }

            $rsl = get::{$ref}(self::$attr,$dat);
         }
      // --------------------------------------------------------------------------------


      // rsl :: value
      // --------------------------------------------------------------------------------
         return $rsl;
      // --------------------------------------------------------------------------------
      }
   // -----------------------------------------------------------------------------------



   // fnc :: add - extend `core.attr` by ref; create if not exist
   // -----------------------------------------------------------------------------------
      public static function add($ref,$val)
      {
      // add :: to - call-stack
      // --------------------------------------------------------------------------------
         self::stack();
      // --------------------------------------------------------------------------------

      // run :: test - `$ref`
      // --------------------------------------------------------------------------------
         self::tst($ref);
      // --------------------------------------------------------------------------------

      // def :: vars - locals
      // --------------------------------------------------------------------------------
         $pty = get::{$ref}(self::$attr);
         $pty = (is::udf($pty) ? $val : val::of($pty)->add($val));
      // --------------------------------------------------------------------------------

      // set :: attr - map value
      // --------------------------------------------------------------------------------
         self::$attr = set::{$ref}(self::$attr,$pty);
         return true;
      // --------------------------------------------------------------------------------
      }
   // -----------------------------------------------------------------------------------



   // fnc :: rip - delete `core` attribute by ref
   // -----------------------------------------------------------------------------------
      public static function rip($ref)
      {
      // add :: to - call-stack
      // --------------------------------------------------------------------------------
         self::stack();
      // --------------------------------------------------------------------------------

      // run :: test - `$ref`
      // --------------------------------------------------------------------------------
         self::tst($ref);
      // --------------------------------------------------------------------------------

      // set :: attr - to updated value
      // --------------------------------------------------------------------------------
         self::$attr = rip::{$ref}(self::$attr);
         return true;
      // --------------------------------------------------------------------------------
      }
   // -----------------------------------------------------------------------------------



   // fnc :: has - check if `core` has attribute by ref
   // -----------------------------------------------------------------------------------
      public static function has($ref)
      {
      // add :: to - call-stack
      // --------------------------------------------------------------------------------
         self::stack();
      // --------------------------------------------------------------------------------

         return ((get::{$ref}(self::$attr) !== udf) ? true : false);
      }
   // -----------------------------------------------------------------------------------



   // fnc :: call - `core` func by ref (if function name is not pre-defined)
   // -----------------------------------------------------------------------------------
      public static function __callStatic($ref, $arg)
      {
      // add :: to - call-stack
      // --------------------------------------------------------------------------------
         self::stack();
      // --------------------------------------------------------------------------------

      // run :: test - `$ref`
      // --------------------------------------------------------------------------------
         self::tst($ref);
      // --------------------------------------------------------------------------------


      // def :: vars - locals
      // --------------------------------------------------------------------------------
         $cls = __CLASS__;
         $pty = self::get($ref);
         $tpe = typeOf($pty);
      // --------------------------------------------------------------------------------


      // cnd :: type - `fnc`
      // --------------------------------------------------------------------------------
         if ($tpe === fnc)
         { return call_user_func_array($pty,$arg); }
      // --------------------------------------------------------------------------------


      // run :: fail - ref
      // --------------------------------------------------------------------------------
         fail::{Fat}("`core.$ref` is ".(($tpe === udf) ? Udf : Unc));
      // --------------------------------------------------------------------------------
      }
   // -----------------------------------------------------------------------------------
   }
// --------------------------------------------------------------------------------------


// run :: core.ini - start core
// --------------------------------------------------------------------------------------
   core::ini(__LINE__);
// --------------------------------------------------------------------------------------

// http::render(204);
core::load('http.fara.blee');

echo 'done';
exit(0);
?>
