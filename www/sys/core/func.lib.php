<?

// fnc :: type - identifier data type
// --------------------------------------------------------------------------------------
   function typeOf($dfn,$cns=udf)
   {
   // def :: main - type
   // -----------------------------------------------------------------------------------
      $tpe = strtolower(gettype($dfn));
   // -----------------------------------------------------------------------------------


   // cnd :: return - if already a type
   // -----------------------------------------------------------------------------------
      if ($tpe === 'string')
      {
         $flc = mb_substr($dfn,0,1).mb_substr($dfn,-1,1);
         $lst = [LTB.LTE, QSB.QSE, CRB,CRE];

         if ($flc === $lst[0])
         { return $dfn; }

         if (in_array($flc, $lst))
         { return ref; }
      }
   // -----------------------------------------------------------------------------------


   // cnd :: uniform - types
   // -----------------------------------------------------------------------------------
      if ($tpe === 'double'){ return flt; }        // double or float is now float
      if ($dfn instanceof Closure){ return fnc; }  // closure or function is now function
   // -----------------------------------------------------------------------------------


   // def :: tpe - concat `Literal Type Begin` & `Literal Type End` constants
   // -----------------------------------------------------------------------------------
      $tpe = LTB.$tpe.LTE;
   // -----------------------------------------------------------------------------------


   // cnd :: match - constant sub-type
   // -----------------------------------------------------------------------------------
      if ($cns !== udf)
      {
      // cnd :: fail - if constant mismatch
      // --------------------------------------------------------------------------------
         if ($tpe !== $cns)
         { fail::{Ref}("constant type mismatch"); }
      // --------------------------------------------------------------------------------


      // cnd :: str - subtype
      // --------------------------------------------------------------------------------
         if ($cns === str)
         {
         // NUL
         // -----------------------------------------------------------------------------
            if (($dfn === '') || ($dfn === 'null'))
            { return NUL; }
         // -----------------------------------------------------------------------------


         // INT FLT HEX
         // -----------------------------------------------------------------------------
            if (is_numeric($dfn))
            {
               if (ctype_digit($dfn))
               { return INT; }

               if (strpos($dfn, '.') !== false)
               { return FLT; }
            }

            if (ctype_xdigit($dfn))
            { return HEX; }
         // -----------------------------------------------------------------------------


         // BLN
         // -----------------------------------------------------------------------------
            if (in_array($dfn, ['true','false','yes','no','on','off']))
            { return BLN; }
         // -----------------------------------------------------------------------------


         // EXP OBJ ARR
         // -----------------------------------------------------------------------------
            $trm = trim($dfn);

            $ctx = ['()'=>EXP, '{}'=>OBJ, '[]'=>ARR, '""'=>QOT, "''"=>QOT, QSB.QSE=>QOT, CRB.CRE=>CRS];
            $flc = $trm[0].substr($trm, -1, 1);

            if (isset($ctx[$flc]))
            {
               $tpe = $ctx[$flc];

               if (($tpe === QOT) && (mb_substr_count($trm,QSB) > 1))
               { return EXP; }

               if (($tpe === CRS) && (mb_substr_count($trm,'.') > 0))
               { return CRM; }

               return $tpe;
            }

            if (($trm[0].mb_substr($trm, -2, 2)) === '();')
            { return EXP; }
         // -----------------------------------------------------------------------------


         // pth
         // -----------------------------------------------------------------------------
            if
            (
               (mb_strlen($dfn) === strlen($dfn)) &&
               (strlen($dfn) > 2) &&
               (strpos($dfn,'/') !== false) &&
               (strpos($dfn,'//') === false) &&
               preg_match('/^[a-zA-Z0-9-\/\._]+$/', $dfn)
            )
            { return PTH; }
         // -----------------------------------------------------------------------------


         // fnc
         // -----------------------------------------------------------------------------
            if ((strpos($trm,'(') !== false) && (strpos($trm,'(') > 2) && (substr($trm,-1,1) === ')'))
            {
               $n = EXPlode('(', $trm)[0];

               if (preg_match('/^[a-zA-Z_]+$/', $n) && (strpos($trm, ')') > strpos($trm, '(')))
               { return FNC; }
            }
         // -----------------------------------------------------------------------------


         // undefined
         // -----------------------------------------------------------------------------
            return UDF;
         // -----------------------------------------------------------------------------
         }
      // --------------------------------------------------------------------------------
      }
   // -----------------------------------------------------------------------------------

      return $tpe;
   }
// --------------------------------------------------------------------------------------




// fnc :: char - glyph from number in charset
// --------------------------------------------------------------------------------------
   function char($num,$enc=null)
   {
      $enc = (($enc === null) ? ENC : $enc);
      return mb_convert_encoding("&#$num;", $enc,'HTML-ENTITIES');
   }
// --------------------------------------------------------------------------------------




// fnc :: mb_trim_be - trim `white-space` or `sub-str` from bgn & end of multi-byte str
// --------------------------------------------------------------------------------------
   function mb_trim_be($dfn,$sub=null)
   {
      if ($sub === null)
      { return preg_replace("/(^\s+)|(\s+$)/us", '', $dfn); }

      $dfn = mb_trim_bo($dfn,$sub);
      $dfn = mb_trim_eo($dfn,$sub);

      return $dfn;
   }
// --------------------------------------------------------------------------------------




// fnc :: mb_trim_bo - trim `white-space` or `sub-str` from bgn only of multi-byte str
// --------------------------------------------------------------------------------------
   function mb_trim_bo($dfn,$sub=null)
   {
      if ($sub === null)
      { return preg_replace("/(^\s+)/us", '', $dfn); }

      $sub = (!is_array($sub) ? [$sub] : $sub);

      foreach ($sub as $str)
      {
         $ssl = mb_strlen($str);
         $dsl = mb_strlen($dfn);
         $bgn = mb_substr($dfn,0,$ssl);

         if ($bgn === $str)
         { $dfn = mb_substr($dfn,$ssl,$dsl); }
      }

      return $dfn;
   }
// --------------------------------------------------------------------------------------




// fnc :: mb_trim_eo - trim `white-space` or `sub-str` from end only of multi-byte str
// --------------------------------------------------------------------------------------
   function mb_trim_eo($dfn,$sub=null)
   {
      if ($sub === null)
      { return preg_replace("/(\s+$)/us", '', $dfn); }

      $sub = (!is_array($sub) ? [$sub] : $sub);

      foreach ($sub as $str)
      {
         $ssl = mb_strlen($str);
         $dsl = mb_strlen($dfn);
         $end = mb_substr($dfn,(0-$ssl),$dsl);

         if ($end === $str)
         { $dfn = mb_substr($dfn,0,(0-$ssl)); }
      }

      return $dfn;
   }
// --------------------------------------------------------------------------------------




// fnc :: span - count "length" logically: nul, bln, str, int, flt, arr, obj
// --------------------------------------------------------------------------------------
   function span($dfn)
   {
      $tpe = typeOf($dfn);

      if ($tpe === nul) { return 0; }
      if ($tpe === str) { return mb_strlen($dfn); }
      if ($tpe === int) { return strlen(($dfn.'')); }
      if ($tpe === bln) { return (($dfn === true) ? 1 : 0); }
      if ($tpe === arr) { return count($dfn); }

      if ($tpe === flt)
      {
         $dfn = ($dfn.'');
         $pts = explode('.', $dfn);

         if (count($pts) < 2)
         { return strlen($dfn); }

         return strlen($pts[1]);
      }

      if ($tpe === obj)
      {
         $num = count($dfn);

         if (($num === 1) && (key($dfn) === null))
         { $num = 0; }

         return $num;
      }
   }
// --------------------------------------------------------------------------------------




// fnc :: val - variable methods
// --------------------------------------------------------------------------------------
   function val($src)
   {
   // rsl :: return - `val::of` with `$src`
   // -----------------------------------------------------------------------------------
      return val::of($src);
   // -----------------------------------------------------------------------------------
   }
// --------------------------------------------------------------------------------------




// fnc :: str - string methods
// --------------------------------------------------------------------------------------
   function str($src=udf)
   {
   // cnd :: undefined - create string
   // -----------------------------------------------------------------------------------
      if ($src === udf)
      { return ''; }
   // -----------------------------------------------------------------------------------

   // cnd :: fail - on type mismatch
   // -----------------------------------------------------------------------------------
      if (!is::str($src))
      { fail::{Tpe}("type: `str` or `nul` expected"); }
   // -----------------------------------------------------------------------------------

   // rsl :: return - `val::of` with `$src`
   // -----------------------------------------------------------------------------------
      return val::of($src);
   // -----------------------------------------------------------------------------------
   }
// --------------------------------------------------------------------------------------




// fnc :: arr - array methods
// --------------------------------------------------------------------------------------
   function arr($src=udf)
   {
   // cnd :: undefined - create array
   // -----------------------------------------------------------------------------------
      if ($src === udf)
      { return []; }
   // -----------------------------------------------------------------------------------

   // cnd :: fail - on type mismatch
   // -----------------------------------------------------------------------------------
      if (!is::arr($src))
      { fail::{Tpe}("type: `arr` or `nul` expected"); }
   // -----------------------------------------------------------------------------------

   // rsl :: return - `val::of` with `$src`
   // -----------------------------------------------------------------------------------
      return val::of($src);
   // -----------------------------------------------------------------------------------
   }
// --------------------------------------------------------------------------------------




// fnc :: obj - array methods
// --------------------------------------------------------------------------------------
   function obj($src=null)
   {
   // cnd :: undefined - create array
   // -----------------------------------------------------------------------------------
      if (($src === null) || (typeOf($src) === arr))
      { return new obj($src); }
   // -----------------------------------------------------------------------------------

   // cnd :: fail - on type mismatch
   // -----------------------------------------------------------------------------------
      if (!is::obj($src))
      { fail::{Tpe}("type: `obj` or `arr` or `nul` expected"); }
   // -----------------------------------------------------------------------------------

   // rsl :: return - `val::of` with `$src`
   // -----------------------------------------------------------------------------------
      return val::of($src);
   // -----------------------------------------------------------------------------------
   }
// --------------------------------------------------------------------------------------




// fnc :: cast - string to value
// --------------------------------------------------------------------------------------
   function cast($dfn,$vrs=null)
   {
   // cnd :: return - non-string value
   // -----------------------------------------------------------------------------------
      if (typeOf($dfn) !== str){ return $dfn; }
   // -----------------------------------------------------------------------------------


   // def :: local - vars
   // -----------------------------------------------------------------------------------
      $cln = trim($dfn);
      $tpe = typeOf($cln,str);
   // -----------------------------------------------------------------------------------


   // cnd :: constant - ref
   // -----------------------------------------------------------------------------------
      if (($cln === 'null') || (mb_strlen($cln) < 1)){ return null; }
      if ($cln === 'true'){ return true; }
      if ($cln === 'false'){ return false; }
   // -----------------------------------------------------------------------------------


   // cnd :: numeric - value
   // -----------------------------------------------------------------------------------
      if (is_numeric($cln))
      { return ($cln * 1); }
   // -----------------------------------------------------------------------------------


   // cnd :: expressions, objects and arrays
   // -----------------------------------------------------------------------------------
      if (strlen($dfn) > 2)
      {
         if (($tpe === EXP) || ($tpe === OBJ) || ($tpe === ARR))
         {
            if ($tpe !== EXP)
            {
               $rsl = json_decode($dfn);

               if ($rsl !== null)
               { return $rsl; }
            }

            $pth = (isset($vrs->{'$path'}) ? $vrs->{'$path'} : null);
            $dfn = (($tpe !== EXP) ? "($dfn)" : $dfn);

            return jsam::cast(jsam::prep($dfn, $pth), $vrs);
         }
      }
   // -----------------------------------------------------------------------------------


   // return default
   // -----------------------------------------------------------------------------------
      return $dfn;
   // -----------------------------------------------------------------------------------
   }
// --------------------------------------------------------------------------------------

?>
