<?

// unified error handler
// --------------------------------------------------------------------------------------
   class fail
   {
   // relevant error names :: default is "error"
   // -----------------------------------------------------------------------------------
      public static function ref($n)
      {
         $n = ($n.'');
         $e = // array
         [
            '2'    => 'warning',
            '8'    => 'notice',
            '32'   => 'warning',
            '128'  => 'warning',
            '512'  => 'warning',
            '1024' => 'notice',
            '2024' => 'strict',
            '8192' => 'deprecated',
            '16384'=> 'deprecated',
         ];

         return (isset($e[$n]) ? $e[$n] : 'error');
      }
   // -----------------------------------------------------------------------------------


   // nice error reporting :: can throw custom errors too ;)
   // -----------------------------------------------------------------------------------
      public static function __callStatic($k, $a)
      {
      // core config
      // --------------------------------------------------------------------------------
         $r = json_decode(file_get_contents(CWD.'/cfg/core/_init.json'));
      // --------------------------------------------------------------------------------


      // locals
      // --------------------------------------------------------------------------------
         $e = strtoupper($k);                                        // error name
         $m = strtolower($a[0]);                                     // message
         $p = str_replace(CWD, '', $a[1]);                           // path
         $l = '('.$a[2].')';                                         // line
         $m = $e.'   '.$m.'   '.$p.'   '.$l;                         // full message
         $t = [];                                                    // stack-trace
         $n = $r->stackNum;                                          // trace history
      // --------------------------------------------------------------------------------


      // write detailed error message to stderr.log
      // --------------------------------------------------------------------------------
         log::stderr($m);
      // --------------------------------------------------------------------------------


      // stact trace
      // --------------------------------------------------------------------------------
         if (isset($a[3]))
         { $s = $a[3]; }                                                // given
         else
         { $s = debug_backtrace(); array_shift($s); array_shift($s); }  // auto
      // --------------------------------------------------------------------------------


      // clean up stack trace
      // --------------------------------------------------------------------------------
         foreach ($s as $k => $v)
         {
         // ignore if no file, or no line is present
         // -----------------------------------------------------------------------------
            if (!isset($v['file']) || !isset($v['line']))
            { continue; }
         // -----------------------------------------------------------------------------

         // formatted stack item parts
         // -----------------------------------------------------------------------------
            $p = str_replace(CWD, '', $v['file']);
            $l = '('.$v['line'].')';
            $c = (isset($v['class']) ? ucwords($v['class']) : 'Function');
            $f = (isset($v['function']) ? $v['function'] : '_');
         // -----------------------------------------------------------------------------

         // ignore on :: empty line, no function, from sys.core, or sys.extclass
         // -----------------------------------------------------------------------------
            if
            (
               ($l === '()') ||
               ($f[0] === '_') ||
               (($f === 'call_user_func_array') && (strpos($p, 'sys/core') !== false)) ||
               ((strpos($p, 'core/extClass') !== false) && (strpos($p, 'eval()') !== false))
            )
            { continue; }
         // -----------------------------------------------------------------------------

         // convert arguments data to arg data types
         // -----------------------------------------------------------------------------
            $a = [];
            foreach ($v['args'] as $v){ $a[] = typeOf($v); }
            $a = ((count($a) > 0) ? implode($a, ', ') : 'null');
         // -----------------------------------------------------------------------------

         // add formatted line to new stack trace
         // -----------------------------------------------------------------------------
            $t[] = ' > '.$c.'::'.$f.'('.$a.')   '.$p.'   '.$l;
         // -----------------------------------------------------------------------------

         // limit stack-trace count to conf.stackNum
         // -----------------------------------------------------------------------------
            if (count($t) == $n) { break; }
         // -----------------------------------------------------------------------------
         }
      // --------------------------------------------------------------------------------


      // stack-trace to string
      // --------------------------------------------------------------------------------
         $s = implode($t, "\n");
         $s = ((strlen($s) > 0) ? "\n\n$s" : $s);
      // --------------------------------------------------------------------------------


      // hide error details in liveMode
      // --------------------------------------------------------------------------------
         $m = "<pre>\n".(liveMode ? 'Appication Error' : $m.$s)."\n</pre>";
      // --------------------------------------------------------------------------------


      // format output according to viewMode & liveMode
      // --------------------------------------------------------------------------------
         if ((viewMode === 'gui') && (liveMode === true))
         { server::respond(500, $m); }                               // web interface
         else
         { echo $m; }                                                // command line
      // --------------------------------------------------------------------------------


      // end process :: failed
      // --------------------------------------------------------------------------------
         exit(1);
      // --------------------------------------------------------------------------------
      }
   // -----------------------------------------------------------------------------------
   }
// --------------------------------------------------------------------------------------



// normal error divert
// --------------------------------------------------------------------------------------
   set_error_handler(function ($n,$m,$p,$l)
   {
      $n = fail::ref($n);
      $s = debug_backtrace(); array_shift($s);

      fail::{$n}($m,$p,$l,$s);
   });
// --------------------------------------------------------------------------------------



// exception divert
// --------------------------------------------------------------------------------------
   set_exception_handler(function ($e)
   {
      $m = $e->getMessage();
      $p = $e->getFile();
      $l = $e->getLine();
      $s = $e->getTrace(); array_shift($s);

      fail::exception($m,$p,$l,$s);
   });
// --------------------------------------------------------------------------------------



// fatal error divert
// --------------------------------------------------------------------------------------
   register_shutdown_function(function()
   {
      $e = error_get_last();

      if ($e !== null)
      {
         $n = fail::ref($e['type']);
         $m = $e['message'];
         $p = $e['file'];
         $l = $e['line'];
         $s = debug_backtrace(); array_shift($s);

         fail::{$n}($m,$p,$l,$s);
      }
   });
// --------------------------------------------------------------------------------------

?>
