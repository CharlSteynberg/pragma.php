<?

// create server class :: prevents double _init run
// --------------------------------------------------------------------------------------
   create_class('server');
// --------------------------------------------------------------------------------------


// respond to client according to request
// --------------------------------------------------------------------------------------
   call(function()
   {
   // request
   // -----------------------------------------------------------------------------------
      $req = client::get('request');
   // -----------------------------------------------------------------------------------


   // extend server config
   // -----------------------------------------------------------------------------------
      set::{'server.conf.routes'}(parse::file('cfg/server/routes.json'));  // path routes
      set::{'server.conf.statCode'}(parse::file('cfg/server/codes.json')); // http codes
   // -----------------------------------------------------------------------------------


   // locals
   // -----------------------------------------------------------------------------------
      $cfg = server::get('conf');
      $rts = $cfg->routes;
      $vrs = $req->vrs;
      $gui = 'pub/doc/client/boot.jsam';
      $msg = 'pub/doc/server/message.jsam';
   // -----------------------------------------------------------------------------------


   // preServe :: pre-run app list in sequence before request handling
   // -----------------------------------------------------------------------------------
      foreach ($cfg->preServe as $prl)
      { create_class($prl, true); }
   // -----------------------------------------------------------------------------------


   // reroute reguest path
   // -----------------------------------------------------------------------------------
      $pth = (isset($rts->{$req->pth}) ? $rts->{$req->pth} : $req->pth);
      $pth = (($pth[0] === '/') ? 'pub'.$pth : $pth);
      $inf = path::info($pth);
      $ext = $inf->extn;

      if (($ext !== null) && (isset($cfg->altrExtn->{$ext})))
      {
         $pts = explode('.', $pth);
         $epi = (count($pts) -1);

         $pts[$epi] = $cfg->altrExtn->{$ext};

         $pth = implode($pts, '.');
      }

      $tgt = $pth;
   // -----------------------------------------------------------------------------------


   // get requested (or rerouted) path information
   // -----------------------------------------------------------------------------------
      $inf = path::info($pth);
   // -----------------------------------------------------------------------------------


   // forbid access to dirs && according to config
   // -----------------------------------------------------------------------------------
      if
      (
         ($inf->type == 'dir') ||
         in_array($inf->extn, $cfg->denyExtn)
      )
      {
         if ($req->pth !== '/robots.txt')
         { $inf->stat = 403; }
      }
   // -----------------------------------------------------------------------------------


   // server message on fail
   // -----------------------------------------------------------------------------------
      if ($inf->stat !== 200)
      {
         server::respond($inf->stat, $req->pth);
         return;
      }
   // -----------------------------------------------------------------------------------


   // set request path to target path
   // -----------------------------------------------------------------------------------
      $vrs->reqPth = $tgt;
   // -----------------------------------------------------------------------------------


   // if no gui is required, serve accordingly
   // -----------------------------------------------------------------------------------
      if (in_array($inf->base, $cfg->noGuiFor))
      { server::respond(path::read($pth)); return; }
   // -----------------------------------------------------------------------------------


   // set source path to target path
   // -----------------------------------------------------------------------------------
      $pth = $tgt;
   // -----------------------------------------------------------------------------------


   // if not requested from GUI, embed target inside gui boot page
   // -----------------------------------------------------------------------------------
      if (!isset($vrs->ctx))
      {
         $pth = $gui;
      }

      $vrs->srcPth = $pth;
      $vrs->reqPth = (('pub/'.$tgt == $gui) ? $vrs->reqPth = $rts->{"/$tgt"} : $vrs->reqPth);

      set::{'client.request.pth'}($tgt);
   // -----------------------------------------------------------------------------------


   // if any output was triggered, print it and exit;
   // -----------------------------------------------------------------------------------
      $out = trim(ob_get_clean());
      if (length($out) > 0){ echo $out; exit; }
   // -----------------------------------------------------------------------------------


   // run class pathMap & get response
   // -----------------------------------------------------------------------------------
      $map = str_replace('/', '.', $pth);
      $map = (((length($inf->root) < 1) || !is_dir('pub/app/'.$inf->root)) ? 'path.read' : $map);
      $rsp = run::{$map}($vrs);
      $out = trim(ob_get_clean());
      $rsp = ((length($out) > 0) ? $out : $rsp);
   // -----------------------------------------------------------------------------------


   // send response to gui
   // -----------------------------------------------------------------------------------
      server::respond((length($rsp) < 1) ? 204 : $rsp);
   // -----------------------------------------------------------------------------------
   });
// --------------------------------------------------------------------------------------

?>
