<?

// recursively build output
// --------------------------------------------------------------------------------------
   function _build_text_css($dfn, $lvl, $cfg, $vrs)
   {
   // buffers
   // -----------------------------------------------------------------------------------
      $rsl = '';
      $ind = '';
      $tab = '';
      $nlc = '';
   // -----------------------------------------------------------------------------------


   // indentation
   // -----------------------------------------------------------------------------------
      if ($cfg->minified === false)
      {
         $tab = '   ';
         $nlc = "\n";

         for ($l=0; $l<$lvl; $l++){ $ind .= $tab; }
      }
   // -----------------------------------------------------------------------------------


   // build node list
   // -----------------------------------------------------------------------------------
      foreach($dfn as $key => $val)
      {
      // sel && atr
      // --------------------------------------------------------------------------------
         if (is_int($key))
         {
            $val = to::arr($val);
            $sel = key($val);
            $atr = $val[$sel];

            if (is_int($sel))
            {
               $rsl .= _build_text_css($val, $lvl, $cfg, $vrs);
               $rsl .= $nlc;
               continue;
            }
         }
         else
         {
            $sel = $key;
            $atr = $val;
         }
      // --------------------------------------------------------------------------------


      // css class refs
      // --------------------------------------------------------------------------------
         if
         (
            ($lvl < 2) && ($sel[0] == '.') &&
            (strpos($sel, ',') === false) &&
            (strpos($sel, ' ') === false)
         )
         {
            $svr = (($sel[0] === '.') ? substr($sel, 1, strlen($sel)) : $sel);
            $avr = ((is::str($atr) && ($atr[0] === '.')) ? substr($atr, 1, strlen($atr)) : $atr);

            $svr = str_replace([':before', ':after'], '', $svr);
            $avr = (is::str($avr) ? str_replace([':before', ':after'], '', $avr) : null);

            if (is::str($atr) && !$avr)
            { throw new Exception('css class "'.$atr.'" is undefined'); }

            $atr = (is::nul($avr) ? $atr : map::get($vrs->{'$CSS'}, $avr));

            $vrs->{'$CSS'}->$svr = $atr;
         }
      // --------------------------------------------------------------------------------


      // pretty print
      // --------------------------------------------------------------------------------
         if (substr($rsl, -2, 2) == "}\n")
         { $rsl .= $nlc; }
      // --------------------------------------------------------------------------------

      // sel :: begin
      // --------------------------------------------------------------------------------
         $rsl .= $ind.$sel.$nlc;
         $rsl .= $ind.'{';

         $ind .= $tab;
      // --------------------------------------------------------------------------------

      // sel :: src
      // --------------------------------------------------------------------------------
         if (typeOf($atr) === arr)
         {
            $lvl++;
            $rsl .= _build_text_css($atr, $lvl, $cfg, $vrs);
            $lvl--;
         }
         else
         {
            foreach($atr as $nme => $pty)
            {
               if (typeOf($pty) === obj)
               {
                  $lvl++;
                  $rsl .= _build_text_css($atr, $lvl, $cfg, $vrs);
                  $lvl--;
               }
               else
               {
                  if ((strlen($pty) > 10) && (substr($pty, 0, 4) === 'url('))
                  {
                     $pth = substr($pty, 4, -1);

                     if (!is_readable(CWD.'/pub'.$pth))
                     {
                        $m = (!file_exists(CWD.'/pub'.$pth) ? 'undefined' : 'forbidden');
                        fail::exception('"'.$pth.'" is '.$m);
                     }

                     $inf = path::info('pub'.$pth);

                     if (($inf->size / 1024) <= $cfg->embdSize)
                     {
                        $str = "url('data:$inf->mime;base64,";
                        $pty = $str.base64_encode(file_get_contents(CWD.'/pub'.$pth))."')";
                     }
                  }

                  $rsl .= $nlc.$ind.$nme.':'.$pty.';';
               }
            }
         }
      // --------------------------------------------------------------------------------

      // sel :: end
      // --------------------------------------------------------------------------------
         $ind = substr($ind, 0, (length($ind) - length($tab)));
         $rsl .= $nlc.$ind.'}'.$nlc.$nlc;
      // --------------------------------------------------------------------------------
      }
   // -----------------------------------------------------------------------------------

   // return result
   // -----------------------------------------------------------------------------------
      return $nlc.trim($rsl, "\n");
   // -----------------------------------------------------------------------------------
   }
// --------------------------------------------------------------------------------------



// compiler
// --------------------------------------------------------------------------------------
   jsam::set("build.text.css", function($dfn, $vrs)
   {
      $cfg = parse::file('cfg/jsam/build.text.css.jsam');

      if ($cfg->minified === 'auto')
      { $cfg->minified = ((liveMode === false) ? false : true); }

      $nlc = (($cfg->minified === false) ? "\n" : '');

      if (!isset($vrs->{'$CSS'}))
      { $vrs->{'$CSS'} = new obj(); }

      return _build_text_css($dfn, 1, $cfg, $vrs);
   });
// --------------------------------------------------------------------------------------

?>
